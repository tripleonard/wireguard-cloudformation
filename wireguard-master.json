{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Set up a wireguard VPN",
    "Metadata": {},
    "Parameters": {
        "VpnAmiId": {
            "Description": "Provide the AWS Marketplace VPN AMI ID",
            "Default": "ami-017eb71b9187457cc",
            "Type": "AWS::EC2::Image::Id"
        },
        "SshKey": {
            "Description": "Previously created ssh key",
            "Type": "String"
        },
        "InstanceType": {
            "Default": "t2.nano",
            "Description": "Instance type",
            "Type": "String"
        },
        "ServerTunnelSubnet": {
            "Default": "10.10.10.1/24",
            "Description": "The network available to the tunnel.",
            "Type": "String"
        },
        "PeerTunnelSubnet": {
            "Default": "10.10.10.2/32",
            "Description": "The possible tunnel peers. One is the default",
            "Type": "String"
        },
        "VpnSecurityGroupID": {
            "Description": "The VPC default Security GroupID",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "AssociateEip": {
            "AllowedValues": [
                "true",
                "false"
            ],
            "Default": "true",
            "Description": "This is to associate with an already created/exported EIP. Should be true unless testing.",
            "Type": "String"
        }
    },
    "Mappings": {},
    "Conditions": {
        "CreateAssociateEip": {
            "Fn::Equals": [
                {
                    "Ref": "AssociateEip"
                },
                "true"
            ]
        }
    },
    "Resources": {
        "VpnSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "VPN security group created by cloudformation",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0"
                    },
                                        {
                        "IpProtocol": "udp",
                        "FromPort": 53,
                        "ToPort": 53,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": 51820,
                        "ToPort": 51820,
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "VpnInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "rpm": {
                                "epel": "https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm"
                            },
                            "yum": {
                                "wireguard-dkms": [],
                                "wireguard-tools": [],
                                "kernel-devel": [],
                                "unbound": []
                            }
                        },
                        "files": {
                            "/etc/wireguard/wg0.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[Interface]\n",
                                            "Address = ",
                                            {
                                                "Ref": "ServerTunnelSubnet"
                                            },
                                            "\n",
                                            "ListenPort = 51820\n",
                                            "PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n",
                                            "PostUp   = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n",
                                            "PrivateKey = fakeServerPrivateKey\n",
                                            "SaveConfig = true\n",
                                            "\n",
                                            "[Peer]\n",
                                            "PublicKey = fakePeerPublicKey\n",
                                            "AllowedIPs = ",
                                            {
                                                "Ref": "PeerTunnelSubnet"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000600",
                                "owner": "root",
                                "group": "root"
                            },
                            "/tmp/wg0-client.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "[Interface]\n",
                                            "Address = ",
                                            {
                                                "Ref": "PeerTunnelSubnet"
                                            },
                                            "\n",
                                            "DNS = 10.10.10.1\n",
                                            "PrivateKey = fakePeerPrivateKey\n",
                                            "\n",
                                            "[Peer]\n",
                                            "PublicKey = fakeServerPublicKey\n",
                                            "AllowedIPs = 0.0.0.0/0\n",
                                            "Endpoint = ",
                                            {
                                                "Fn::ImportValue": "WireguardEIPAddress"
                                            },
                                            ":51820\n"
                                        ]
                                    ]
                                },
                                "mode": "000600",
                                "owner": "root",
                                "group": "root"
                            },
                            "/etc/unbound/unbound.conf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "server:\n",
                                            "   access-control: 0.0.0.0/0                 refuse\n",
                                            "   access-control: 10.10.10.0/24         allow\n",
                                            "   access-control: 127.0.0.1                 allow    chroot: \"\"\n",
                                            "   auto-trust-anchor-file: \"/var/lib/unbound/root.key\"\n",
                                            "   cache-max-ttl: 14400\n",
                                            "   cache-min-ttl: 1800\n",
                                            "   directory: \"/etc/unbound\"\n",
                                            "   extended-statistics: yes\n",
                                            "   harden-dnssec-stripped: yes\n",
                                            "   harden-glue: yes\n",
                                            "   harden-referral-path: yes\n",
                                            "   hide-identity: yes\n",
                                            "   hide-version: yes\n",
                                            "   include: \"/etc/unbound/local.d/*.conf\"\n",
                                            "   interface-automatic: no\n",
                                            "   interface: 0.0.0.0\n",
                                            "   ip-transparent: yes\n",
                                            "   ipsecmod-enabled: no\n",
                                            "   ipsecmod-hook: \"/usr/libexec/ipsec/_unbound-hook\"\n",
                                            "   log-time-ascii: yes\n",
                                            "   max-udp-size: 3072\n",
                                            "   minimal-responses: yes\n",
                                            "   module-config: \"ipsecmod validator iterator\"\n",
                                            "   num-threads: 4\n",
                                            "   pidfile: \"/var/run/unbound/unbound.pid\"\n",
                                            "   prefetch-key: yes\n",
                                            "   prefetch: yes\n",
                                            "   private-address: 10.10.10.0/24\n",
                                            "   root-hints: \"/var/lib/unbound/root.hints\"\n",
                                            "   rrset-roundrobin: yes\n",
                                            "   so-reuseport: yes\n",
                                            "   statistics-cumulative: no\n",
                                            "   statistics-interval: 0\n",
                                            "   trust-anchor-signaling: yes\n",
                                            "   trusted-keys-file: \"/etc/unbound/keys.d/*.key\"\n",
                                            "   unwanted-reply-threshold: 10000000\n",
                                            "   username: \"unbound\"\n",
                                            "   val-clean-additional: yes\n",
                                            "   val-log-level: 1\n",
                                            "   val-permissive-mode: no\n",
                                            "   verbosity: 1\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "unbound",
                                "group": "unbound"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "unbound": {
                                    "enabled":  "true",
                                    "ensureRunning":  "false"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Ref": "VpnAmiId"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "SshKey"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y\n",
                                "# Add wireguard repo\n",
                                "curl -Lo /etc/yum.repos.d/wireguard.repo https://copr.fedorainfracloud.org/coprs/jdoss/wireguard/repo/epel-7/jdoss-wireguard-epel-7.repo\n",
                                "# Install the files and packages from the metadata\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource VpnInstance     ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "echo \"net.ipv4.ip_forward = 1\" > /etc/sysctl.conf\n",
                                "echo \"net.ipv6.conf.all.forwarding = 1\" >> /etc/sysctl.conf\n",
                                "# Generate keys and put them in configs\n",
                                "SERVER_PRIVATE_KEY=$(wg genkey)\n",
                                "SERVER_PUBLIC_KEY=$(echo $SERVER_PRIVATE_KEY | wg pubkey)\n",
                                "sed -i \"s|fakeServerPrivateKey|$SERVER_PRIVATE_KEY|\" /etc/wireguard/wg0.conf\n",
                                "sed -i \"s|fakeServerPublicKey|$SERVER_PUBLIC_KEY|\" /tmp/wg0-client.conf\n",
                                "CLIENT_PRIVATE_KEY=$(wg genkey)\n",
                                "CLIENT_PUBLIC_KEY=$(echo $CLIENT_PRIVATE_KEY | wg pubkey)\n",
                                "sed -i \"s|fakePeerPublicKey|$CLIENT_PUBLIC_KEY|\" /etc/wireguard/wg0.conf\n",
                                "sed -i \"s|fakePeerPrivateKey|$CLIENT_PRIVATE_KEY|\" /tmp/wg0-client.conf\n",
                                "\n",
                                "curl -o /var/lib/unbound/root.hints https://www.internic.net/domain/named.cache\n",
                                "# Reboot needed to force kernel header to take effect\n",
                                "reboot\n"
                            ]
                        ]
                    }
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "VpnSecurityGroupID"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "VpnSecurityGroup"
                    }
                ]
            }
        },
        "WireguardVpnEipAsso": {
            "Type": "AWS::EC2::EIPAssociation",
            "Condition": "CreateAssociateEip",
            "Properties": {
                "AllocationId": {
                    "Fn::ImportValue": "WireguardEIPAllocationId"
                },
                "InstanceId": {
                    "Ref": "VpnInstance"
                }
            }
        }
    },
    "Outputs": {
        "VpnInstanceId": {
            "Description": "ID of VPN Instance",
            "Value": {
                "Ref": "VpnInstance"
            }
        }
    }
}